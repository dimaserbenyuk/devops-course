## Generate a key
# openssl rand -base64 741 > mongodb-keyfile
## Create k8s secrets
# kubectl create secret generic mongo-key --from-file=mongodb-keyfile
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: mongo
#   labels:
#     name: mongo
# spec:
#   ports:
#   - port: 27017
#     targetPort: 27017
#   clusterIP: None
#   selector:
#     role: mongo
# ---
# apiVersion: apps/v1
# kind: StatefulSet
# metadata:
#   name: mongo
# spec:
#   selector:
#     matchLabels:
#       app: mongo
#   serviceName: "mongo"
#   replicas: 3
#   template:
#     metadata:
#       labels:
#         app: mongo
#     spec:
#       terminationGracePeriodSeconds: 10
#       containers:
#         - name: mongo
#           image: mongo
#           command:
#           - /bin/sh
#           - -c
#           - >
#             if [ -f /data/db/admin-user.lock ]; then
#               mongod --replSet rs0 --clusterAuthMode keyFile --keyFile /etc/secrets-volume/mongodb-keyfile --setParameter authenticationMechanisms=SCRAM-SHA-1;
#             else
#               mongod --auth;
#             fi;
#           lifecycle:
#             postStart:
#               exec:
#                 command:
#                 - /bin/sh
#                 - -c
#                 - >
#                   if [ ! -f /data/db/admin-user.lock ]; then
#                     sleep 5;
#                     touch /data/db/admin-user.lock
#                     if [ "$HOSTNAME" = "mongo-0" ]; then
#                       mongo --eval 'db = db.getSiblingDB("admin"); db.createUser({ user: "admin", pwd: "password", roles: [{ role: "root", db: "admin" }]});';
#                     fi;
#                     mongod --shutdown;
#                   fi;
#           ports:
#             - containerPort: 27017
#           volumeMounts:
#             - name: mongo-key
#               mountPath: "/etc/secrets-volume"
#               readOnly: true
#             - name: mongo-persistent-storage
#               mountPath: /data/db
#         - name: mongo-sidecar
#           image: cvallance/mongo-k8s-sidecar
#           env:
#             - name: MONGO_SIDECAR_POD_LABELS
#               value: "role=mongo,environment=test"
#             - name: MONGODB_USERNAME
#               value: admin
#             - name: MONGODB_PASSWORD
#               value: password
#             - name: MONGODB_DATABASE
#               value: admin
#       volumes:
#       - name: mongo-key
#         secret:
#           defaultMode: 0400
#           secretName: mongo-key
#   volumeClaimTemplates:
#   - metadata:
#       name: mongo-persistent-storage
#     spec:
#       accessModes: [ "ReadWriteOnce" ]
#       resources:
#         requests:
#           storage: 1Gi
# apiVersion: v1
# kind: Service
# metadata:
#   name: mongo
#   labels:
#     name: mongo
# spec:
#   ports:
#     - port: 27017
#       targetPort: 27017
#   clusterIP: None
#   selector:
#     role: mongo
# ---
# apiVersion: apps/v1
# kind: StatefulSet
# metadata:
#   name: mongo
# spec:
#   selector:
#     matchLabels:
#       app: mongo
#   serviceName: "mongo"
#   replicas: 3
#   template:
#     metadata:
#       labels:
#         app: mongo
#     spec:
#       serviceAccountName: default
#       terminationGracePeriodSeconds: 10
#       containers:
#         - name: mongo
#           image: mongo
#           command:
#           - /bin/sh
#           - -c
#           - >
#             if [ "$HOSTNAME" = "mongo-0" ]; then
#               mongod --replSet rs0 --bind_ip_all --clusterAuthMode keyFile --keyFile /etc/secrets-volume/mongodb-keyfile --auth;
#             else
#               mongod --replSet rs0 --bind_ip_all --clusterAuthMode keyFile --keyFile /etc/secrets-volume/mongodb-keyfile --auth;
#             fi;
#           lifecycle:
#             postStart:
#               exec:
#                 command:
#                 - /bin/sh
#                 - -c
#                 - >
#                   if [ "$HOSTNAME" = "mongo-0" ]; then
#                     mongo --eval 'rs.initiate({_id: "rs0", members: [{_id: 0, host: "mongo-0.mongo.default.svc.cluster.local:27017"}, {_id: 1, host: "mongo-1.mongo.default.svc.cluster.local:27017"}, {_id: 2, host: "mongo-2.mongo.default.svc.cluster.local:27017"}]});'
#                     mongo admin -u admin -p password --eval 'db.createUser({user: "admin", pwd: "password", roles: [{role: "root", db: "admin"}]});'
#                   fi;
#           ports:
#             - containerPort: 27017
#           volumeMounts:
#             - name: mongo-key
#               mountPath: "/etc/secrets-volume"
#               readOnly: true
#             - name: mongo-persistent-storage
#               mountPath: /data/db
#         - name: mongo-sidecar
#           image: cvallance/mongo-k8s-sidecar
#           env:
#             - name: MONGO_SIDECAR_POD_LABELS
#               value: "role=mongo,environment=test"
#             - name: MONGODB_USERNAME
#               value: admin
#             - name: MONGODB_PASSWORD
#               value: password
#             - name: MONGODB_DATABASE
#               value: admin
#       volumes:
#       - name: mongo-key
#         secret:
#           defaultMode: 0400
#           secretName: mongo-key
#   volumeClaimTemplates:
#     - metadata:
#         name: mongo-persistent-storage
#       spec:
#         accessModes: [ "ReadWriteOnce" ]
#         resources:
#           requests:
#             storage: 1Gi

# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: Role
# metadata:
#   name: mongo-role
#   namespace: default
# rules:
# - apiGroups: [""]
#   resources: ["pods"]
#   verbs: ["get", "list", "watch"]
# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: RoleBinding
# metadata:
#   name: mongo-rolebinding
#   namespace: default
# subjects:
# - kind: ServiceAccount
#   name: default
#   namespace: default
# roleRef:
#   kind: Role
#   name: mongo-role
#   apiGroup: rbac.authorization.k8s.io

apiVersion: v1
kind: ServiceAccount
metadata:
  name: mongo-account
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  namespace: default
  name: mongo-role
rules:
- apiGroups: [""]
  resources: ["deployments"]
  verbs: ["list", "watch"]
- apiGroups: [""]
  resources: ["services"]
  verbs: ["*"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get","list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: mongo_role_binding
subjects:
- kind: ServiceAccount
  name: mongo-account
  namespace: default  # Add the namespace here
roleRef:
  kind: ClusterRole
  name: mongo-role
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: default
  name: mongodb-replica
spec:
  serviceName: pce-mongodb
  replicas: 3
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
        selector: mongo
    spec:
      terminationGracePeriodSeconds: 30
      serviceAccount: mongo-account
      containers:
      - name: mongodb
        image: docker.io/mongo:4.2
        command: ["/bin/sh"]
        args: ["-c", "mongod --replSet=rs0 --bind_ip_all"]
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: root
        - name: MONGO_INITDB_ROOT_PASSWORD
          value: example
        - name: DATABASE_URL
          value: "mongodb://mongodb-replica-0.mongodb.default.svc.cluster.local:27017,mongodb-replica-1.mongodb.default.svc.cluster.local:27017,mongodb-replica-2.mongodb.default.svc.cluster.local:27017/todo"
        resources:
          limits:
            cpu: 100m
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - name: mongo-port
          containerPort: 27017
        volumeMounts:
        - name: mongo-data
          mountPath: /data/db
  volumeClaimTemplates:
  - metadata:
      name: mongo-data
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi

---
apiVersion: v1
kind: Service
metadata:
  namespace: default
  name: mongodb
  labels:
    app: mongo
spec:
  type: ClusterIP
  ports:
    - port: 27017
      targetPort: 27017
  selector:
    app: mongo

  # cfg.members[0].host="mongodb-replica-0.pce-mongodb:27017"

  # rs.add("mongodb-replica-1.pce-mongodb:27017")

#   export DATABASE_URL="mongodb://mongodb-replica-0.mongodb.default.svc.cluster.local:27017,mongodb-replica-1.mongodb.default.svc.cluster.local:27017,mongodb-replica-2.mongodb.default.svc.cluster
# .local:27017/todo?replicaSet=rs0"